import telebot
from telebot import types
import yt_dlp as youtube_dl
import os
from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip
from moviepy.editor import VideoFileClip
import logging
import re
from collections import deque
from openai import OpenAI
from config import KONSPIROLOG_API_OPENAI, KONSPIROLOG_BOT_API
import time
import threading
from requests.exceptions import ReadTimeout, Timeout, ConnectionError
from telebot.apihelper import ApiTelegramException

API_TOKEN = KONSPIROLOG_BOT_API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=KONSPIROLOG_API_OPENAI, base_url="https://api.proxyapi.ru/openai/v1")

bot = telebot.TeleBot(API_TOKEN)
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB
MAX_MESSAGE_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã) –¥–ª—è —É—á–µ–Ω–æ–≥–æ-–∫–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥–∞
conversation_history_scientist = deque(maxlen=20)
# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã) –¥–ª—è –∫–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥–∞-–ª—é–±–∏—Ç–µ–ª—è
conversation_history_amateur = deque(maxlen=20)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot_errors.log', level=logging.ERROR,
                    format='%(asctime)s %(message)s', encoding='utf-8')

def error_handler(func):
    def wrapper(*args, **kwargs):
        max_retries = 5
        retry_delay = 5  # seconds
        attempt = 0

        while attempt < max_retries:
            try:
                return func(*args, **kwargs)
            except (ReadTimeout, Timeout, ConnectionError) as e:
                attempt += 1
                logging.error(
                    f"Network error in {func.__name__}, attempt {attempt}/{max_retries}: {e}",
                    exc_info=True
                )
                if attempt < max_retries:
                    time.sleep(retry_delay)
                else:
                    logging.error(f"All attempts failed for {func.__name__}.")
                    if args and isinstance(args[0], types.Message):
                        send_error_message(args[0].chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏–Ω–≥! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –∏ –º—ã –±–µ–∂–∏–º –µ–µ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–π @bukrisdy, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏ –Ω–∞–π—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –°–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
                    elif kwargs.get('call') and isinstance(kwargs['call'], types.CallbackQuery):
                        send_error_message(kwargs['call'].message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏–Ω–≥! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –∏ –º—ã –±–µ–∂–∏–º –µ–µ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–π @bukrisdy, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏ –Ω–∞–π—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –°–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
                    break
            except ApiTelegramException as e:
                if e.error_code == 403 and 'bot was blocked by the user' in e.result_json['description']:
                    user_id = args[0].chat.id if args and isinstance(args[0], types.Message) else 'unknown'
                    logging.error(f"Bot was blocked by the user with chat_id {user_id}")
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                else:
                    logging.error(
                        f"ApiTelegramException in {func.__name__}: {e}",
                        exc_info=True
                    )
                break
            except Exception as e:
                user_id = args[0].chat.id if args and isinstance(args[0], types.Message) else 'unknown'
                logging.error(
                    f"Error in {func.__name__} (user_id: {user_id}): {e}",
                    exc_info=True
                )
                if args and isinstance(args[0], types.Message):
                    send_error_message(args[0].chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏–Ω–≥! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏ –º—ã –±–µ–∂–∏–º –µ–µ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–π @bukrisdy, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏ –Ω–∞–π—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –°–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
                elif kwargs.get('call') and isinstance(kwargs['call'], types.CallbackQuery):
                    send_error_message(kwargs['call'].message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏–Ω–≥! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏ –º—ã –±–µ–∂–∏–º –µ–µ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–π @bukrisdy, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏ –Ω–∞–π—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –°–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
                break
    return wrapper

def send_error_message(chat_id, message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_main_menu = types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    markup.add(btn_main_menu)
    bot.send_message(chat_id, message, reply_markup=markup)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Konspirolog_bot. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube –∏ Twitter ‚¨áÔ∏è, "
        "–Ω–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ:...\n\n...–º—ã –æ–±—Å—É–¥–∏–º —Å —Ç–æ–±–æ–π —Ç–æ, –æ —á–µ–º –≤—Å–µ –º–æ–ª—á–∞—Ç!üïµÔ∏è‚Äç‚ôÇÔ∏è"
    )
    bot.send_message(message.chat.id, welcome_text)
    send_main_menu(message.chat.id)

def send_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ row_width –¥–ª—è –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    btn1 = types.InlineKeyboardButton(text="–°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ ‚¨áÔ∏è", callback_data="download_video")
    btn2 = types.InlineKeyboardButton(text="–ì–æ–≤–æ—Ä–∏—Ç—å –æ –∑–∞–≥–æ–≤–æ—Ä–∞—Ö üïµÔ∏è‚Äç‚ôÇÔ∏è", callback_data="talk")
    markup.add(btn1)
    markup.add(btn2)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
@error_handler
def handle_query(call):
    if call.data == "download_video":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube –∏–ª–∏ Twitter:")
        bot.register_next_step_handler(msg, download_video)
    elif call.data == "talk":
        send_talk_options(call.message.chat.id)
    elif call.data == "retry_link":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube –∏–ª–∏ Twitter:")
        bot.register_next_step_handler(msg, download_video)
    elif call.data == "main_menu":
        send_main_menu(call.message.chat.id)
    elif call.data == "scientist":
        bot.send_message(call.message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –∫–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥–∏–∏. –ó–¥–µ—Å—å —Ç—ã —É–∑–Ω–∞–µ—à—å, "
                                               "–∫–∞–∫ –∏ –ø–æ—á–µ–º—É –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–µ–æ—Ä–∏–∏ –∑–∞–≥–æ–≤–æ—Ä–∞, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è, –ø–æ—á–µ–º—É –æ–Ω–∏ "
                                               "–Ω–µ –≤—ã–¥–µ—Ä–∂–∏–≤–∞—é—Ç –Ω–∞—É—á–Ω–æ–π –∫—Ä–∏—Ç–∏–∫–∏. üßê –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, "
                                               "–∏ –±—É–¥–µ–º –≤–º–µ—Å—Ç–µ –∏—Å–∫–∞—Ç—å –∏—Å—Ç–∏–Ω—Éüîç!")
        msg = bot.send_message(call.message.chat.id, "–ù–∞—á–∏–Ω–∞–π!")
        bot.register_next_step_handler(msg, handle_scientist_question)
    elif call.data == "amateur":
        bot.send_message(call.message.chat.id, "üëã–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã–µ –∑–∞–≥–æ–≤–æ—Ä—ã –∏ —Å–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–∏–Ω—ã.üïµÔ∏è‚Äç‚ôÇÔ∏è–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º, —á—Ç–æ –æ—Ç –Ω–∞—Å —Å–∫—Ä—ã–≤–∞—é—Ç!üåç")
        msg = bot.send_message(call.message.chat.id, "–ì–æ–≤–æ—Ä–∏, —Ç–æ–ª—å–∫–æ —Ç–∏—Ö–æ!")
        bot.register_next_step_handler(msg, handle_amateur_question)
    elif call.data == "continue_talk_scientist":
        msg = bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–π...")
        bot.register_next_step_handler(msg, handle_scientist_question)
    elif call.data == "continue_talk_amateur":
        msg = bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–π...")
        bot.register_next_step_handler(msg, handle_amateur_question)

def send_talk_options(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –∫–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥–∏–∏üë®‚Äçüè´", callback_data="scientist")
    btn2 = types.InlineKeyboardButton(text="–ö–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥-–ª—é–±–∏—Ç–µ–ª—åüïµÔ∏è‚Äç", callback_data="amateur")
    btn3 = types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=markup)

@error_handler
def handle_scientist_question(message):
    user_id = message.from_user.id
    question = message.text
    try:
        bot.send_message(message.chat.id, "–ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞—É–∫–∞...üìñ")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation_history_scientist.append({"role": "user", "content": question})

        answer = question_answer_from_ChatGPT(question, "scientist")
        send_long_message(message.chat.id, answer, "scientist")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. User ID: {user_id}, Question: {question}, Error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        send_main_menu(message.chat.id)

@error_handler
def handle_amateur_question(message):
    user_id = message.from_user.id
    question = message.text
    try:
        bot.send_message(message.chat.id, "–ù–∞—Å –ø–æ–¥—Å–ª—É—à–∏–≤–∞—é—Ç! –ü–æ–¥–æ–∂–¥–∏, –æ—Ç–æ–π–¥—É –æ—Ç –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏...üëÇ")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation_history_amateur.append({"role": "user", "content": question})

        answer = question_answer_from_ChatGPT(question, "amateur")
        send_long_message(message.chat.id, answer, "amateur")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. User ID: {user_id}, Question: {question}, Error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        send_main_menu(message.chat.id)

def question_answer_from_ChatGPT(question, role):
    if role == "scientist":
        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–µ–Ω—ã–π, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∫–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥–∏–∏.
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, —Å –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, –∏ –≤–∫–ª—é—á–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –∑–∞–≥–æ–≤–æ—Ä–∞.
        –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–æ—Ä–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –Ω–∞—É—á–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        messages = [{"role": "system", "content": prompt}] + list(conversation_history_scientist)
    else:
        prompt = f"""–¢—ã –ª—é–±–∏—Ç–µ–ª—å-–∫–æ–Ω—Å–ø–∏—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç —Ç–µ–æ—Ä–∏–∏ –∑–∞–≥–æ–≤–æ—Ä–∞ –≤–æ –≤—Å–µ–º –Ω–∞ —Å–≤–µ—Ç–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Ö.
        –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —è—Ä–∫–∏–º–∏, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç–µ–æ—Ä–∏—è–º–∏ –∑–∞–≥–æ–≤–æ—Ä–∞.
        –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–æ—Ä–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç—Ç–æ–π —Ç–µ–æ—Ä–∏–∏.
        –û–≥—Ä–∞–Ω–∏—á—å –æ—Ç–≤–µ—Ç 1000 –∑–Ω–∞–∫–∞–º–∏."""
        messages = [{"role": "system", "content": prompt}] + list(conversation_history_amateur)

    response = client.chat.completions.create(
        model="gpt-4",
        messages=messages
    )

    answer = response.choices[0].message.content

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    if role == "scientist":
        conversation_history_scientist.append({"role": "assistant", "content": answer})
    else:
        conversation_history_amateur.append({"role": "assistant", "content": answer})

    return answer

def send_long_message(chat_id, message_text, role):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    parts = [message_text[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(message_text), MAX_MESSAGE_LENGTH)]
    for part in parts:
        bot.send_message(chat_id, part)
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_continue_talk = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä‚û°Ô∏è", callback_data=f"continue_talk_{role}")
    btn_main_menu = types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    markup.add(btn_continue_talk)
    markup.add(btn_main_menu)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏
def is_valid_url(url):
    regex = re.compile(
        r'^(?:http|ftp)s?://'  # http:// –∏–ª–∏ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  # IPv4 –∞–¥—Ä–µ—Å
        r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  # IPv6 –∞–¥—Ä–µ—Å
        r'(?::\d+)?'  # –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return re.match(regex, url) is not None

@error_handler
def download_video(message):
    url = message.text
    if not is_valid_url(url):
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_retry = types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É", callback_data="retry_link")
        btn_main_menu = types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        markup.add(btn_retry)
        markup.add(btn_main_menu)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
        return

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å.‚¨áÔ∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã.üßò\n\n**–ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–±, —Ç–æ –æ–Ω –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏.**")

    user_id = message.from_user.id
    video_path = f'video_{user_id}.mp4'
    try:
        video_path = download_video_from_url(url, video_path)
        send_video_in_parts(message.chat.id, video_path)
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. User ID: {user_id}, URL: {url}, Error: {e}"
        logging.error(error_message)
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        send_main_menu(message.chat.id)
    finally:
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –±–ª–æ–∫–µ finally
        try:
            os.remove(video_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. User ID: {user_id}, URL: {url}, Error: {e}")
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube –∏ Twitter
def download_video_from_url(url, output_filename):
    if os.path.exists(output_filename):
        os.remove(output_filename)  # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    ydl_opts = {
        'format': 'best',
        'outtmpl': output_filename,
    }
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])
    return output_filename

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –ø–æ —á–∞—Å—Ç—è–º
def send_video_in_parts(chat_id, video_path):
    file_size = os.path.getsize(video_path)
    success = True
    try:
        if file_size <= MAX_FILE_SIZE:
            with open(video_path, 'rb') as video:
                bot.send_video(chat_id, video, timeout=1000)
        else:
            video = VideoFileClip(video_path)
            duration = video.duration
            num_parts = int(file_size / MAX_FILE_SIZE) + 1
            part_duration = duration / num_parts
            start = 0
            part_num = 1
            while start < duration:
                end = start + part_duration
                if end > duration:
                    end = duration
                part_filename = f'{video_path}_part_{part_num}.mp4'
                ffmpeg_extract_subclip(video_path, start, end, targetname=part_filename)
                part_size = os.path.getsize(part_filename)
                if part_size <= MAX_FILE_SIZE:
                    with open(part_filename, 'rb') as part_video:
                        bot.send_video(chat_id, part_video, timeout=1000)
                else:
                    bot.send_message(chat_id, f"–ß–∞—Å—Ç—å {part_num} –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
                os.remove(part_filename)
                start = end
                part_num += 1
            video.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º VideoFileClip –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    except Exception as e:
        success = False
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. Chat ID: {chat_id}, Error: {e}"
        logging.error(error_message)
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        if success:
            bot.send_message(chat_id, "–í—Å–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        send_main_menu(chat_id)

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
